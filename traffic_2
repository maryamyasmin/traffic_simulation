#!/bin/bash
# Traffic Simulator Template
# This script runs for 4 hours and simulates realistic network activity:
#   - HTTP/HTTPS browsing (with random link clicks)
#   - DHCP discovery (dummy simulation)
#   - Email (SMTP/IMAP/POP3) connection attempts
#   - SSH connection attempts
#   - FTP file downloads (using vsftpd at 192.168.122.171)
#   - VoIP/SIP access
#   - RDP connection attempts
#   - YouTube streaming (30-minute video)
#
# To create 15 variants, make 15 copies of this file and change the URL arrays accordingly.

TOTAL_DURATION=$((4 * 3600))  # 4 hours in seconds
START_TIME=$(date +%s)

############################
# URL/Target Configurations
############################

# HTTP URLs (modify per variant)
HTTP_URLS=(
    "https://www.google.com"
    "https://www.wikipedia.org"
    "https://www.reddit.com"
    "https://www.bbc.com"
    "https://www.cnn.com"
)

# HTTPS URLs (modify per variant)
HTTPS_URLS=(
    "https://www.amazon.com"
    "https://www.facebook.com"
    "https://www.twitter.com"
    "https://www.linkedin.com"
    "https://www.microsoft.com"
)

# (For DHCP simulation, weâ€™ll simply use a dummy pause; you can modify if needed.)
DHCP_SERVERS=(
    "192.168.122.1"  # Example DHCP server IP
)

# Email targets: "server:port" (SMTP, IMAP, POP3)
EMAIL_SERVERS=(
    "smtp.gmail.com:25"
    "imap.mail.yahoo.com:143"
    "pop.mail.yahoo.com:110"
    "smtp.office365.com:25"
    "imap.gmail.com:143"
)

# SSH targets: "server:port"
SSH_TARGETS=(
    "ssh.github.com:22"
    "ssh.bitbucket.com:22"
    "digitalocean.example.com:22"  # Replace with actual if available
    "linode.example.com:22"
    "vultr.example.com:22"
)

# FTP: Using your vsftpd server details
FTP_URL="ftp://192.168.122.171/google-chrome-stable_current_amd64.deb"  # Ensure 'sample.txt' exists on the server
FTP_USER="ftpuser"
FTP_PASS="ftpuser"

# VoIP/SIP URLs (simulate by fetching service pages)
VOIP_URLS=(
    "https://www.zoom.us"
    "https://teams.microsoft.com"
    "https://meet.google.com"
    "https://www.webex.com"
    "https://www.skype.com"
)

# RDP targets: "server:port"
RDP_TARGETS=(
    "azure-vm.example.com:3389"
    "aws-workspace.example.com:3389"
    "gcloud-vm.example.com:3389"
    "ibm-vm.example.com:3389"
    "ovh-vm.example.com:3389"
)

# YouTube URLs for streaming (modify VIDEOID as needed)
YOUTUBE_URLS=(
    "https://www.youtube.com/watch?v=VIDEOID1"
    "https://www.youtube.com/watch?v=VIDEOID2"
    "https://www.youtube.com/watch?v=VIDEOID3"
    "https://www.youtube.com/watch?v=VIDEOID4"
    "https://www.youtube.com/watch?v=VIDEOID5"
)

############################
# Utility & Simulation Functions
############################

# Random pause between 5-10 minutes (300 to 600 seconds)
random_pause() {
    local pause_time=$((RANDOM % 301 + 300))
    echo "Pausing for ${pause_time} seconds..."
    sleep ${pause_time}
}

# Simulate HTTP/HTTPS browsing with random link clicking
simulate_http() {
    # Randomly choose between HTTP and HTTPS
    if (( RANDOM % 2 )); then
        local url=${HTTP_URLS[$RANDOM % ${#HTTP_URLS[@]}]}
    else
        local url=${HTTPS_URLS[$RANDOM % ${#HTTPS_URLS[@]}]}
    fi
    echo "Simulating browsing of: $url"
    page_content=$(curl -s "$url")
    echo "Fetched $url; extracting links to simulate click..."
    # Extract href links from the page
    links=( $(echo "$page_content" | grep -Eo 'href="[^"]+"' | sed 's/href="//' | sed 's/"//') )
    if [ ${#links[@]} -gt 0 ]; then
        random_link=${links[$RANDOM % ${#links[@]}]}
        # Handle relative links by prepending base URL
        if [[ "$random_link" =~ ^/ ]]; then
            base=$(echo "$url" | awk -F/ '{print $1"//"$3}')
            random_link="$base$random_link"
        fi
        echo "Clicking on random link: $random_link"
        curl -s "$random_link" > /dev/null
    else
        echo "No clickable links found on $url."
    fi
    random_pause
}

# Simulate DHCP discovery (dummy simulation)
simulate_dhcp() {
    echo "Simulating DHCP discovery (dummy)..."
    # Here you could invoke dhcping or similar if desired.
    random_pause
}

# Simulate Email (SMTP/IMAP/POP3) connection attempt
simulate_email() {
    local target=${EMAIL_SERVERS[$RANDOM % ${#EMAIL_SERVERS[@]}]}
    IFS=":" read server port <<< "$target"
    echo "Simulating Email connection to $server on port $port"
    timeout 10 bash -c "echo QUIT | nc -w 5 $server $port" &> /dev/null
    random_pause
}

# Simulate SSH connection attempt
simulate_ssh() {
    local target=${SSH_TARGETS[$RANDOM % ${#SSH_TARGETS[@]}]}
    IFS=":" read server port <<< "$target"
    echo "Simulating SSH connection to $server on port $port"
    timeout 10 bash -c "nc -z -w 5 $server $port" &> /dev/null
    random_pause
}

# Simulate FTP file download from the vsftpd server
simulate_ftp() {
    echo "Simulating FTP file download from $FTP_URL"
    wget -q --ftp-user="$FTP_USER" --ftp-password="$FTP_PASS" -O /dev/null "$FTP_URL"
    random_pause
}

# Simulate VoIP/SIP access by fetching a service webpage
simulate_voip() {
    local url=${VOIP_URLS[$RANDOM % ${#VOIP_URLS[@]}]}
    echo "Simulating VoIP/SIP access at: $url"
    curl -s "$url" > /dev/null
    random_pause
}

# Simulate RDP connection attempt
simulate_rdp() {
    local target=${RDP_TARGETS[$RANDOM % ${#RDP_TARGETS[@]}]}
    IFS=":" read server port <<< "$target"
    echo "Simulating RDP connection to $server on port $port"
    timeout 10 bash -c "nc -z -w 5 $server $port" &> /dev/null
    random_pause
}

# Simulate YouTube streaming for 30 minutes
simulate_youtube() {
    local url=${YOUTUBE_URLS[$RANDOM % ${#YOUTUBE_URLS[@]}]}
    echo "Simulating YouTube streaming: $url (30 minutes)"
    curl -s "$url" > /dev/null
    sleep 1800  # 30 minutes
}

# Array of all simulation functions to choose from randomly
protocol_functions=(
    simulate_http
    simulate_dhcp
    simulate_email
    simulate_ssh
    simulate_ftp
    simulate_voip
    simulate_rdp
    simulate_youtube
)

############################
# Main Loop
############################

echo "Starting traffic simulation for 4 hours..."
while [ $(($(date +%s) - START_TIME)) -lt $TOTAL_DURATION ]; do
    chosen_func=${protocol_functions[$RANDOM % ${#protocol_functions[@]}]}
    echo "Executing: $chosen_func"
    $chosen_func
done

echo "Traffic simulation complete."

